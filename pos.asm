;macro for printing a string
PRINT MACRO M
	MOV AH, 09H
	MOV DX, OFFSET M
	INT 21H
ENDM

.MODEL SMALL
.STACK 64

;---------------Data Segment----------------
.DATA	;data definition

;------LOGIN
	PASSCODE DB "Q$"
  	LOGIN_M1 DB 10, 13, "------PLASHSPEED POS------"
  			 DB 10, 13, "ENTER PASSWORD: $"
 	LG DB 21          ;<=== MAXIMUM NUMBER OF CHARS ALLOWED (20).
       DB ?           ;<=== NUMBER OF CHARS THAT USER ENTERED (?).
       DB 21 DUP(0)   ;<=== ARRAY OF CHARS (FINISH WITH 0DH=13).

;---CONSTANTS
	TEN DB 10
	HUN DB 100
	CC  DB 0			;CHOICE FOR MAIN MENU
	TAX DB 106
	POINTS DB 10
	DISCOUNT DB 95

	


;---PRICE OF PRODUCTS
	SHIRT DB 10
	SHORTS DB 15
	HATS DB 6
	SOCKS DB 5
;---AMOUNT OF PRODUCTS IN STOCK
	SHIRT_NUM DB 50
	SHORTS_NUM DB 60
	HATS_NUM DB 70
	SOCKS_NUM DB 30
	SHIRT_NUMD DB 0, 0, 0
	SHORTS_NUMD DB 0, 0, 0
	HATS_NUMD DB 0, 0, 0
	SOCKS_NUMD DB 0, 0, 0

;---main menu
	MAIN_MENU DB 10, 13, 10, 13, "-----PLASHSPEED POS----- "
			  DB 10, 13, "1. CHECKOUT "
			  DB 10, 13, "2. INVENTORY MANAGEMENT "
			  DB 10, 13, "3. CUSTOMER MANAGEMENT "
			  DB 10, 13, "4. SALES REPORTING "
			  DB 10, 13, "5. RETURN AND REFUND "
			  DB 10, 13, "6. STAFF MANAGEMNT "
			  DB 10, 13, "9. EXIT "
			  DB 10, 13, "  "
			  DB 10, 13, "CHOICE: $"

;---product menu
	PRO_MENU DB 10, 13, "-------PRODUCT MENU------- "
			 DB 10, 13, "1. SHIRT"
			 DB 10, 13, "2. SHORTS"
			 DB 10, 13, "3. HATS"
			 DB 10, 13, "4. SOCKS"
			 DB 10, 13, "9. EXIT"
			 DB 10, 13, " "
			 DB 10, 13, "CHOICE: $"


;---inventory menu
	INV_MENU DB 10, 13, 10, 13, "---------INVENTORY MANAGEMENT---------"
			 DB 10, 13, "1. DISPLAY STOCK REPORT"
			 DB 10, 13, "2. UPDATE STOCK"
			 DB 10, 13, "3. SET ORDER REMINDER"
			 DB 10, 13, "4. SEND ORDER REMINDER"
			 DB 10, 13, "9. EXIT"
			 DB 10, 13, " "
			 DB 10, 13, "CHOICE: $"
	;----SET REMINDER
	INV_M1 DB 10, 13, "MIN NUMBER OF PRODUCT IN STORE: $"
	INV_M2 DB 10, 13, "SEND REMINDER WHEN LIMIT REACH $"
	INV_M3 DB "IS LOW IN STOCK. STOCK AMOUNT: $"
	INV_M4 DB 10, 13, "SHIRT $"
	INV_M5 DB 10, 13, "SHORTS $"
	INV_M6 DB 10, 13, "HATS $"
	INV_M7 DB 10, 13, "SOCKS $"
	RMD DB 0, 0
	;---STOCK REPORT
	INV_M8 DB 10, 13, "-------STOCK REPORT-------"
		   DB 10, 13, "ITEM      QUANTITY "
		   DB 10, 13, " SHIRT      $"
	INV_M9 DB 10, 13, " SHORTS     $"
	INV_M10 DB 10, 13, " HATS       $"
	INV_M11 DB 10, 13, " SOCKS      $"
	;---UPDATE STOCK
	INV_M12 DB 10, 13, "ENTER QUANTITY: $"
	INV_M13 DB 10, 13, "TOTAL QUANTITY: $"
	
	INV_M DB 10, 13, " $"
	SHIRT_NUM_UP DB 0, 0
	SHORTS_NUM_UP DB 0, 0
	HATS_NUM_UP DB 0, 0
	SOCKS_NUM_UP DB 0, 0


;---staff menu 1
	STF_MENU1 DB 10, 13, 10, 13, "-----------STAFF MANAGEMENT----------- "
			  DB 10, 13, "1. NEW STAFF REGISTER "
			  DB 10, 13, "2. CHANGE PASSWORD"
			  DB 10, 13, "3. REMOVE STAFF "
			  DB 10, 13, "4. EXIT "
			  DB 10, 13, "  "
			  DB 10, 13, "CHOICE: $" 
;---staff change password
	STF_M1 DB 10, 13, 10, 13, "------CHANGE PASSWORD------ "
		   DB 10, 13, "ENTER NEW PASSWORD: $"
	STF_M2 DB 10, 13, "CONFIRM NEW PASSWORD: $"
	STF_M3 DB 10, 13, "2 PASSWORS MUST BE SAME!!! $"
	STF_M4 DB 10, 13, 10, 13, "PASSWORD RESET SUCCEED!!!$"
	NEW_PSW DB 26, ?, 26 DUP('$')
	CON_PSW DB 26, ?, 26 DUP('$')
;---REMOVE STAFF
	STF_M5 DB 10, 13, 10, 13, "ENTER NAME: $"
	STF_M6 DB 10, 13, "CONFIRM TO REMOVE STAFF: $"
	STF_M7 DB " ???"
		   DB 10, 13, "1. YES"
		   DB 10, 13, "2. NO "
		   DB 10, 13, 10, 13, "CHOICE: $"
	STF_M8 DB 10, 13, "STAFF REMOVAL SUCCEED $"
	STF_M9 DB 10, 13, "STAFF REMOVAL FAIL $"
	STF_ID_RMV DB 16, ?, 16 DUP('$')
;---ADD STAFF
	STF_M10 DB 10, 13, "CONFIRM TO ADD STAFF: $"
	STF_M11 DB " ???"
		    DB 10, 13, "1. YES"
		    DB 10, 13, "2. NO "
		    DB 10, 13, 10, 13, "CHOICE: $"
	STF_M12 DB 10, 13, "STAFF REGISTER SUCCEED $"
	STF_M13 DB 10, 13, "STAFF REGISTER FAIL $"
	STF_M DB 10, 13, " $"
	STF_ID_ADD DB 16, ?, 16 DUP('$')

;---return and refund
	RTN_M1 DB 10, 13, "ENTER QUANTITY TO RETURN: $"
	RTN_M2 DB 10, 13, 10, 13, "TOTAL REFUND AMOUNT IS RM $"
	RTN_M3 DB 10, 13, "RETURN SUCCEED, PROCEED TO REFUND.... $"
	RTN_M4 DB 10, 13, "ENTER RECEIPT ID: $"
	RTN_M5 DB 10, 13, "INCORRECT RECEIPT ID!!! $"
	RTN_M DB 10, 13, " $"
	RECEIPT_NO DB "A0001$"
	RECEIPT_ID DB 6 
       		   DB ?      
       		   DB 6 DUP(0)  
	RTN_QTY DB 0, 0, 0
	RTN_TOT DB 0, 0, 0

;---checkout
	checkOut_M1 DB 10, 13, "ENTER PRODUCT CHOICE: $"
	checkOut_M2 DB 10, 13, "ENTER PRODUCT QUANTITY: $"
	checkOut_M3 DB 10, 13, "MEMBERSHIP?"
				DB 10, 13, "1. YES"
				DB 10, 13, "2. NO"
				DB 10, 13, "ENTER CHOICE. $"

	checkOut_M4 DB 10, 13, "-------RECEIPT-----$"
				DB 10, 13, "RECEIPT NO: A0001$"

	checkOut_M5 DB 10, 13, "PRICE BEFORE TAX: RM $"
	checkOut_M6 DB 10, 13, "TAX: 6% $"
	checkOut_M7 DB 10, 13, "PRICE AFTER TAX: RM $"
	
	
	CHECKOUT_QTY DB 0, 0, 0
	CHECKOUT_PRICEATAX DB 0		  ;PRICE AFTER TAX
	CHECKOUT_PRICEATAXD DB 0		  ;PRICE AFTER TAX
	CHECKOUT_PRICEBTAX DB 0, 0, 0 ;PRICE BEFORE TAX
	CHECKOUT_PRICEBTAX_SHIRT DB 0, 0, 0 ;PRICE BEFORE TAX
	CHECKOUT_PRICEBTAX_SHORTS DB 0, 0, 0 ;PRICE BEFORE TAX
	CHECKOUT_PRICEBTAX_HATS DB 0, 0, 0 ;PRICE BEFORE TAX
	CHECKOUT_PRICEBTAX_SOCKS DB 0, 0, 0 ;PRICE BEFORE TAX
	CHECKOUT_TOT DB 0, 0, 0
	CHECKOUT_TOTD DB 0, 0

;---SYSTEM MESSAGE
	MSG0 DB 10, 13, " $"
	MSG1 DB 10, 13, "EXITING PLASHSPEED..... $"
	MSG2 DB 10, 13, "INVALID CHOICE, PLEASE TRY AGAIN!!! $"
	MSG3 DB 10, 13, "REDIRECTING TO PLASHSPEED..... $"
	MSG4 DB 10, 13, "ANYTHING ELSE: "
		 DB 10, 13, "1. YES "
		 DB 10, 13, "2. NO "
		 DB 10, 13, 10, 13, "CHOICE: $"

	

;---------------Code Segment----------------
.CODE

MAIN PROC
	MOV AX,@DATA  ; Define data segment
	MOV DS,AX


;-----LOGIN
LOGIN:
	MOV AX, 03H
	INT 10H

	mov ah, 09h
	lea dx, LOGIN_M1
	int 21h

	mov ah, 0ah
	MOV DX, OFFSET LG     ;<=== TELL INT 21H TO STORE CAPTURED STRING HERE.
	int 21h

	MOV SI, OFFSET LG + 2 ;<=== POINT TO THE ARRAY OF CHARS.
	MOV DI, OFFSET PASSCODE      ;<=== POINT TO THE USER.
	ck: 
	;CHECK END OF USER.  
	  MOV DH, [DI]
	  CMP DH, '$'
	  JE  CLR_SCN                ;<=== END REACHED. ALL CHARS MATCH.

	;CHECK END OF INPUT.  
	  MOV DL, [SI]          ;<=== CURRENT ENTERED CHAR.
	  CMP DL, 13
	  JE  LOGIN             ;<=== END REACHED. INPUT IS SHORTER.

	;COMPARE CURRENT ENTERED CHAR TO CURRENT USER CHAR.  
	  CMP DL, DH
	  jne LOGIN             ;<=== CURRENT CHARS ARE DIFFERENT.
	  INC SI                ;<== NEXT ENTERED CHAR.
	  INC DI                ;<== NEXT USER CHAR.
	  JMP CK                ;<== REPEAT.

CLR_SCN:
	MOV AX, 03H
	INT 10H

;--------------codes
TOP:
	PRINT MAIN_MENU
	CALL ACCEPT		; USER ENTER CHOICE
	MOV CC, AL
	SUB CC, 30H
	

;---------CHECKOUT------------
CHECKOUT:
	CMP CC, 1		; GO TO INVENTORY IF CHOICE != 1
	JNE INVENTORY

	PRINT PRO_MENU
	CALL CHECKOUT_CAL	;CALCULATE TOTAL PRICE OF PRODUCTS


	PRINT MSG3
	JMP TOP

;---------INVENTORY------------------
INVENTORY:
	CMP CC, 2		; GO TO CUSTOMER IF CHOICE != 2
	JNE CUSTOMER

	PRINT INV_MENU
	CALL ACCEPT
	MOV BL, AL
	SUB BL, 30H

	STK_REPORT:
		CMP BL, 1
		JNE STK_UPDATE

		CALL INV_REPORT

		PRINT MSG3
		JMP INVENTORY

	STK_UPDATE:
		CMP BL, 2
		JNE STK_SET_RMD

		CALL INV_UPDATE
		PRINT MSG3
		JMP INVENTORY

	STK_SET_RMD:
		CMP BL, 3
		JNE STK_RMD

		CALL INV_SETRMD

		PRINT MSG3
		JMP INVENTORY
	STK_RMD:
		CMP BL, 4
		JNE EXIT_STK
		

		PRINT MSG3
		JMP INVENTORY

	EXIT_STK:
		CMP BL, 9			; EXIT
		JNE STK_INVALID
		PRINT MSG3
		JMP TOP

	STK_INVALID:
		PRINT MSG2
		JMP INVENTORY

	PRINT MSG3
	JMP TOP

;--------CUSTOMER MANAGEMENT--------------
CUSTOMER:
	CMP CC, 3		; GO TO SALES IF CHOICE != 3
	JNE SALES

;	CMP CC, 6		; EXIT IF CHOICE != 6
;	JNE EXIT
;
;	PRINT CUSTOMER_MENU1		
;	CALL ACCEPT		; USER ENTER CHOICE
;	MOV BL, AL
;	SUB BL, 48
;
;	CUSTOMER_NEW:			; NEW CUSTOMER BEGIN
;		CMP BL, 1
;		JNE CHANGE_PASS
;
;		CALL STF_ADD
;		PRINT MSG3
;		JMP STAFF			; NEW CUSTOMER END
;
;	CHANGE_PASS:
;		CMP BL, 2
;		JNE STF_REMOVE
;
;		CALL STF_PASS
;		PRINT STF_M4
;		PRINT MSG3
;		JMP STAFF
;
;	MEMBER_REMOVE:
;		CMP BL, 3
;		JNE EXIT_STAFF
;
;		CALL STF_RMV
;
;		PRINT MSG3
;		JMP STAFF
;
;	EXIT_MEMBER:
;		CMP BL, 9			; EXIT
;		JNE STF_INVALID
;		PRINT MSG3
;		JMP TOP
;
;	MEMBER_INVALID:
;		PRINT MSG2
;		JMP STAFF

	PRINT MSG3
	JMP TOP

;---------SALES REPORTING-------------------
SALES:
	CMP CC, 4		; GO TO RETURN IF CHOICE != 4
	JNE RETURN


	PRINT MSG3
	JMP TOP

;---------RETURN AND REFUND----------------
RETURN:
	CMP CC, 5		; GO TO STAFF IF CHOICE != 5
	JNE STAFF

	PRINT PRO_MENU
	CALL RTN_CAL	; CAL TOTAL
	PRINT RTN_M3

	PRINT MSG3
	JMP TOP
;----------STAFF MANAGEMENT---------------
STAFF:
	CMP CC, 6		; EXIT IF CHOICE != 6
	JNE EXIT

	PRINT STF_MENU1		
	CALL ACCEPT		; USER ENTER CHOICE
	MOV BL, AL
	SUB BL, 48

	STF_NEW:			; NEW STAFF START
		CMP BL, 1
		JNE CHANGE_PASS

		CALL STF_ADD
		PRINT MSG3
		JMP STAFF			; NEW STAFF END

	CHANGE_PASS:
		CMP BL, 2
		JNE STF_REMOVE

		CALL STF_PASS
		PRINT STF_M4
		PRINT MSG3
		JMP STAFF

	STF_REMOVE:
		CMP BL, 3
		JNE EXIT_STAFF

		CALL STF_RMV

		PRINT MSG3
		JMP STAFF

	EXIT_STAFF:
		CMP BL, 9			; EXIT
		JNE STF_INVALID
		PRINT MSG3
		JMP TOP

	STF_INVALID:
		PRINT MSG2
		JMP STAFF

;-------EXIT----------------------
EXIT:
	CMP CC, 9
	JNE INVALID
		PRINT MSG1
		JMP QUIT 

;------INVALID CHOICE----------------
INVALID:
	PRINT MSG2
	JMP TOP

;--------ACCEPT CHOICE PROCEDURE
ACCEPT PROC NEAR
	MOV AH, 01H
	INT 21H
	RET
ACCEPT ENDP

;------------STOCK REPORT---DONE
INV_REPORT PROC NEAR
	PRINT INV_M8			;shirt quantity
	XOR AX, AX
	XOR BX, BX
	MOV AL, SHIRT_NUM_UP(0)
	MUL TEN
	ADD AL, SHIRT_NUM_UP(1)
	MOV BL, AL

	XOR AX, AX
	XOR DX, DX
	MOV AL, SHIRT_NUM
	ADD AL, BL
	DIV HUN
	MOV SHIRT_NUMD(0), AL
	MOV DL, AH
	XOR AX,AX
	MOV AL, DL	
	DIV Ten
	MOV SHIRT_NUMD(1), AL
	MOV SHIRT_NUMD(2), AH
	ADD SHIRT_NUMD(0), 30H
	ADD SHIRT_NUMD(1), 30H
	ADD SHIRT_NUMD(2), 30H
	MOV AH, 02H
	MOV DL, SHIRT_NUMD(0)
	INT 21H
	MOV AH, 02H
	MOV DL, SHIRT_NUMD(1)
	INT 21H
	MOV AH, 02H
	MOV DL, SHIRT_NUMD(2)
	INT 21H

	PRINT INV_M9			;shorts quantity
	XOR AX, AX
	XOR BX, BX
	MOV AL, SHORTS_NUM_UP(0)
	MUL TEN
	ADD AL, SHORTS_NUM_UP(1)
	MOV BL, AL

	XOR AX, AX
	XOR DX, DX
	MOV AL, SHORTS_NUM
	ADD AL, BL
	DIV HUN
	MOV SHORTS_NUMD(0), AL
	MOV DL, AH
	XOR AX,AX
	MOV AL, DL	
	DIV Ten
	MOV SHORTS_NUMD(1), AL
	MOV SHORTS_NUMD(2), AH
	ADD SHORTS_NUMD(0), 30H
	ADD SHORTS_NUMD(1), 30H
	ADD SHORTS_NUMD(2), 30H
	MOV AH, 02H
	MOV DL, SHORTS_NUMD(0)
	INT 21H
	MOV AH, 02H
	MOV DL, SHORTS_NUMD(1)
	INT 21H
	MOV AH, 02H
	MOV DL, SHORTS_NUMD(2)
	INT 21H

	PRINT INV_M10			;hats quantity
	XOR AX, AX
	XOR BX, BX
	MOV AL, HATS_NUM_UP(0)
	MUL TEN
	ADD AL, HATS_NUM_UP(1)
	MOV BL, AL

	XOR AX, AX
	XOR DX, DX
	MOV AL, HATS_NUM
	ADD AL, BL
	DIV HUN
	MOV HATS_NUMD(0), AL
	MOV DL, AH
	XOR AX,AX
	MOV AL, DL	
	DIV Ten
	MOV HATS_NUMD(1), AL
	MOV HATS_NUMD(2), AH
	ADD HATS_NUMD(0), 30H
	ADD HATS_NUMD(1), 30H
	ADD HATS_NUMD(2), 30H
	MOV AH, 02H
	MOV DL, HATS_NUMD(0)
	INT 21H
	MOV AH, 02H
	MOV DL, HATS_NUMD(1)
	INT 21H
	MOV AH, 02H
	MOV DL, HATS_NUMD(2)
	INT 21H

	PRINT INV_M11		;socks quantity
	XOR AX, AX
	XOR BX, BX
	MOV AL, SOCKS_NUM_UP(0)
	MUL TEN
	ADD AL, SOCKS_NUM_UP(1)
	MOV BL, AL

	XOR AX, AX
	XOR DX, DX
	MOV AL, SOCKS_NUM
	ADD AL, BL
	DIV HUN
	MOV SOCKS_NUMD(0), AL
	MOV DL, AH
	XOR AX,AX
	MOV AL, DL	
	DIV Ten
	MOV SOCKS_NUMD(1), AL
	MOV SOCKS_NUMD(2), AH
	ADD SOCKS_NUMD(0), 30H
	ADD SOCKS_NUMD(1), 30H
	ADD SOCKS_NUMD(2), 30H
	MOV AH, 02H
	MOV DL, SOCKS_NUMD(0)
	INT 21H
	MOV AH, 02H
	MOV DL, SOCKS_NUMD(1)
	INT 21H
	MOV AH, 02H
	MOV DL, SOCKS_NUMD(2)
	INT 21H

	RET
INV_REPORT ENDP

;------------UPDATE STOCK----DONE
INV_UPDATE PROC NEAR
	UP_INV:
	PRINT PRO_MENU
	CALL ACCEPT
	MOV BL, AL
	SUB BL, 30H
	UP_SHIRT:
		CMP BL, 1
		JNE UP_SHORTS

		PRINT INV_M12
		CALL ACCEPT
		MOV SHIRT_NUM_UP(0), AL
		SUB SHIRT_NUM_UP(0), 30H
		CALL ACCEPT
		MOV SHIRT_NUM_UP(1), AL
		SUB SHIRT_NUM_UP(1), 30H
		XOR BX, BX
		MOV AL, SHIRT_NUM_UP(0)
		MUL TEN
		ADD AL, SHIRT_NUM_UP(1)
		MOV BL, AL

		XOR AX, AX
		XOR DX, DX
		MOV AL, SHIRT_NUM
		ADD AL, BL
		DIV HUN
		MOV SHIRT_NUMD(0), AL
		MOV DL, AH
		XOR AX,AX
		MOV AL, DL	
		DIV Ten
		MOV SHIRT_NUMD(1), AL
		MOV SHIRT_NUMD(2), AH
		ADD SHIRT_NUMD(0), 30H
		ADD SHIRT_NUMD(1), 30H
		ADD SHIRT_NUMD(2), 30H
		PRINT INV_M13
		MOV AH, 02H
		MOV DL, SHIRT_NUMD(0)
		INT 21H
		MOV AH, 02H
		MOV DL, SHIRT_NUMD(1)
		INT 21H
		MOV AH, 02H
		MOV DL, SHIRT_NUMD(2)
		INT 21H
		
		JMP UP_MULTIPLE
	UP_SHORTS:
		CMP BL, 2
		JNE UP_HATS

		PRINT INV_M12
		CALL ACCEPT
		MOV SHORTS_NUM_UP(0), AL
		SUB SHORTS_NUM_UP(0), 30H
		CALL ACCEPT
		MOV SHORTS_NUM_UP(1), AL
		SUB SHORTS_NUM_UP(1), 30H
		XOR BX, BX
		MOV AL, SHORTS_NUM_UP(0)
		MUL TEN
		ADD AL, SHORTS_NUM_UP(1)
		MOV BL, AL

		XOR AX, AX
		XOR DX, DX
		MOV AL, SHORTS_NUM
		ADD AL, BL
		DIV HUN
		MOV SHORTS_NUMD(0), AL
		MOV DL, AH
		XOR AX,AX
		MOV AL, DL	
		DIV Ten
		MOV SHORTS_NUMD(1), AL
		MOV SHORTS_NUMD(2), AH
		ADD SHORTS_NUMD(0), 30H
		ADD SHORTS_NUMD(1), 30H
		ADD SHORTS_NUMD(2), 30H
		PRINT INV_M13
		MOV AH, 02H
		MOV DL, SHORTS_NUMD(0)
		INT 21H
		MOV AH, 02H
		MOV DL, SHORTS_NUMD(1)
		INT 21H
		MOV AH, 02H
		MOV DL, SHORTS_NUMD(2)
		INT 21H
		
		JMP UP_MULTIPLE
	UP_HATS:
		CMP BL, 3
		JNE UP_SOCKS

		PRINT INV_M12
		CALL ACCEPT
		MOV HATS_NUM_UP(0), AL
		SUB HATS_NUM_UP(0), 30H
		CALL ACCEPT
		MOV HATS_NUM_UP(1), AL
		SUB HATS_NUM_UP(1), 30H
		XOR BX, BX
		MOV AL, HATS_NUM_UP(0)
		MUL TEN
		ADD AL, HATS_NUM_UP(1)
		MOV BL, AL

		XOR AX, AX
		XOR DX, DX
		MOV AL, HATS_NUM
		ADD AL, BL
		DIV HUN
		MOV HATS_NUMD(0), AL
		MOV DL, AH
		XOR AX,AX
		MOV AL, DL	
		DIV Ten
		MOV HATS_NUMD(1), AL
		MOV HATS_NUMD(2), AH
		ADD HATS_NUMD(0), 30H
		ADD HATS_NUMD(1), 30H
		ADD HATS_NUMD(2), 30H
		PRINT INV_M13
		MOV AH, 02H
		MOV DL, HATS_NUMD(0)
		INT 21H
		MOV AH, 02H
		MOV DL, HATS_NUMD(1)
		INT 21H
		MOV AH, 02H
		MOV DL, HATS_NUMD(2)
		INT 21H
		
		JMP UP_MULTIPLE
	UP_SOCKS:
		CMP BL, 4
		JNE UP_EXIT

		PRINT INV_M12
		CALL ACCEPT
		MOV SOCKS_NUM_UP(0), AL
		SUB SOCKS_NUM_UP(0), 30H
		CALL ACCEPT
		MOV SOCKS_NUM_UP(1), AL
		SUB SOCKS_NUM_UP(1), 30H
		XOR BX, BX
		MOV AL, SOCKS_NUM_UP(0)
		MUL TEN
		ADD AL, SOCKS_NUM_UP(1)
		MOV BL, AL

		XOR AX, AX
		XOR DX, DX
		MOV AL, SOCKS_NUM
		ADD AL, BL
		DIV HUN
		MOV SOCKS_NUMD(0), AL
		MOV DL, AH
		XOR AX,AX
		MOV AL, DL	
		DIV Ten
		MOV SOCKS_NUMD(1), AL
		MOV SOCKS_NUMD(2), AH
		ADD SOCKS_NUMD(0), 30H
		ADD SOCKS_NUMD(1), 30H
		ADD SOCKS_NUMD(2), 30H
		PRINT INV_M13
		MOV AH, 02H
		MOV DL, SOCKS_NUMD(0)
		INT 21H
		MOV AH, 02H
		MOV DL, SOCKS_NUMD(1)
		INT 21H
		MOV AH, 02H
		MOV DL, SOCKS_NUMD(2)
		INT 21H
		
		JMP UP_MULTIPLE

	UP_EXIT:
		CMP BL, 9
		JNE UP_INVALID
		PRINT MSG3
		JMP TOP

	UP_INVALID:
		PRINT MSG2
		JMP INV_UPDATE
	
	UP_MULTIPLE:
		PRINT MSG4
		XOR AX, AX
		CALL ACCEPT
		MOV DL, AL
		SUB DL, 30H
	UP_MULTIPLE_YES:
		CMP DL, 1
		JNE UP_MULTIPLE_NO
		JMP UP_INV
	UP_MULTIPLE_NO:
		CMP DL, 2
		JNE UP_MULTIPLE_INVALID
		RET
	UP_MULTIPLE_INVALID:
		PRINT MSG2
		JMP UP_MULTIPLE

INV_UPDATE ENDP

;------------SET REMAINDER TO BUY STOCK---DONE
INV_SETRMD PROC NEAR
	PRINT INV_M1
	MOV AH, 01H		; DIGIT 1
	INT 21H
	MOV RMD(0), AL
	MOV AH, 01H		; DIGIT 2
	INT 21H
	MOV RMD(1), AL
	PRINT INV_M2	
	MOV AH, 02H		; PRINT DIGIT 1
	MOV DL, RMD(0)
	INT 21H
	MOV AH, 02H		; PRINT DIGIT 2
	MOV DL, RMD(1)
	INT 21H

	SUB RMD(0), 30H
	SUB RMD(1), 30H
	XOR AX, AX
	MOV AL, RMD(0)
	MUL TEN
	ADD AL, RMD(1)
	ADD RMD(0), 30H
	ADD RMD(1), 30H
	
	RET
INV_SETRMD ENDP

;-------------SEND STOCK REMINDER

;------------STAFF NEW-----------------DONE
STF_ADD PROC NEAR
	PRINT STF_M5                                 
    MOV AH, 0AH 			;CAPTURE STRING FROM KEYBOARD.
    MOV DX, OFFSET STF_ID_ADD
    INT 21H

	;CHANGE CHR(13) BY '$'.
    MOV SI, OFFSET STF_ID_ADD + 1 ;NUMBER OF CHARACTERS ENTERED.
    MOV CL, [SI] ;MOVE LENGTH TO CL.
    MOV CH, 00      ;CLEAR CH TO USE CX. 
    INC CX ;TO REACH CHR(13).
    ADD SI, CX ;NOW SI POINTS TO CHR(13).
    MOV AL, '$'
    MOV [SI], AL ;REPLACE CHR(13) BY '$'.            

	STF_ADD_Q:
		PRINT STF_M10               
    	MOV AH, 9 					;DISPLAY STRING.
    	MOV DX, OFFSET STF_ID_ADD + 2	;MUST END WITH '$'.
   		INT 21H

		PRINT STF_M11
		CALL ACCEPT
		MOV BL, AL
		SUB BL, 30H
		STF_ADD_CON:				;CONFIRM
			CMP BL, 1
			JNE STF_ADD_CAN
			PRINT STF_M12
			RET
		STF_ADD_CAN:				;CANCEL
			CMP BL, 2
			JNE STF_ADD_INVALID
			PRINT STF_M13
			RET
		STF_ADD_INVALID:
			PRINT MSG2
			JMP STF_ADD_Q
STF_ADD ENDP

;------------STAFF REMOVE-------------DONE
STF_RMV PROC NEAR
	PRINT STF_M5                                 
    MOV AH, 0AH 			;CAPTURE STRING FROM KEYBOARD.
    MOV DX, OFFSET STF_ID_RMV
    INT 21H

	;CHANGE CHR(13) BY '$'.
    MOV SI, OFFSET STF_ID_RMV + 1 ;NUMBER OF CHARACTERS ENTERED.
    MOV CL, [SI] ;MOVE LENGTH TO CL.
    MOV CH, 00      ;CLEAR CH TO USE CX. 
    INC CX ;TO REACH CHR(13).
    ADD SI, CX ;NOW SI POINTS TO CHR(13).
    MOV AL, '$'
    MOV [SI], AL ;REPLACE CHR(13) BY '$'.            

	STF_RMV_Q:
		PRINT STF_M6                 
    	MOV AH, 9 					;DISPLAY STRING.
    	MOV DX, OFFSET STF_ID_RMV + 2	;MUST END WITH '$'.
   		INT 21H

		PRINT STF_M7
		CALL ACCEPT
		MOV BL, AL
		SUB BL, 30H
		STF_RMV_CON:
			CMP BL, 1
			JNE STF_RMV_CAN
			PRINT STF_M8
			RET
		STF_RMV_CAN:
			CMP BL, 2
			JNE STF_RMV_INVALID
			PRINT STF_M9
			RET
		STF_RMV_INVALID:
			PRINT MSG2
			JMP STF_RMV_Q
STF_RMV ENDP

;------------STAFF CHANGE PASSWORD-----CLEAR STRING IN VARIABLE
STF_PASS PROC NEAR
	PSW_IN:
		LEA SI, NEW_PSW
		LEA DI, CON_PSW
		PRINT STF_M1
		MOV AH, 0AH		;FIRST STRING
        MOV DX, SI
        INT 21H
		PRINT STF_M2
		MOV AH, 0AH		;SECOND STRING
        MOV DX, DI
        INT 21H
		XOR BX, BX
        MOV BL, NEW_PSW + 1
        MOV BH, CON_PSW + 1
        CMP BL, BH
        JNE CMPR_PSW_FAIL
        ADD SI, 2
        ADD DI, 2
    CMPR_PSW:
	  	MOV BL, BYTE PTR[SI]
        CMP BYTE PTR[DI], BL
        JNE CMPR_PSW_FAIL
        INC SI
        INC DI
        CMP BYTE PTR[DI], "$"
        JNE CMPR_PSW
		RET
    CMPR_PSW_FAIL:
	  	PRINT STF_M3
		JMP CHANGE_PASS

STF_PASS ENDP

;-------------CALCULATE TOTAL REFUND AMOUNT----DONE
RTN_CAL PROC NEAR
		MOV AH, 01H
		INT 21H
		MOV DL, AL
		SUB DL, 30H
		RTN_SHIRT:
			CMP DL, 1
			JNE RTN_SHORTS

			PRINT RTN_M1
			MOV AH, 01H		; DIGIT 1
			INT 21H			
			MOV RTN_QTY(0), AL
			SUB RTN_QTY(0), 30H
			MOV AH, 01H		; DIGIT 2
			INT 21H				
			MOV RTN_QTY(1), AL
			SUB RTN_QTY(1), 30H
			XOR AX, AX				; COMBINE DIGIT1 & DIGIT 2
			MOV AL, RTN_QTY(0)
			MUL TEN
			ADD AL, RTN_QTY(1)
			
			XOR DX, DX
			XOR BX, BX
			MUL SHIRT				; PRICE OF PRODUCT
			DIV HUN
			MOV RTN_TOT(0), AL
			MOV DL, AH
			XOR AX,AX
			MOV AL, DL	
			DIV Ten		
			MOV RTN_TOT(1), AL
			MOV RTN_TOT(2), AH
			ADD RTN_TOT(0), 30H
			ADD RTN_TOT(1), 30H
			ADD RTN_TOT(2), 30H
			PRINT RTN_M2
			MOV AH, 02H
			MOV DL, RTN_TOT(0)
			INT 21H
			MOV AH, 02H
			MOV DL, RTN_TOT(1)
			INT 21H
			MOV AH, 02H
			MOV DL, RTN_TOT(2)
			INT 21H
		
			RET
		RTN_SHORTS:
			CMP DL, 2
			JNE RTN_HATS

			PRINT RTN_M1
			MOV AH, 01H		; DIGIT 1
			INT 21H			
			MOV RTN_QTY(0), AL
			SUB RTN_QTY(0), 30H
			MOV AH, 01H		; DIGIT 2
			INT 21H				
			MOV RTN_QTY(1), AL
			SUB RTN_QTY(1), 30H
			XOR AX, AX				; COMBINE DIGIT1 & DIGIT 2
			MOV AL, RTN_QTY(0)
			MUL TEN
			ADD AL, RTN_QTY(1)
			XOR DX, DX
			XOR BX, BX

			MUL SHORTS				; PRICE OF PRODUCT
			DIV HUN
			MOV RTN_TOT(0), AL
			MOV DL, AH
			XOR AX,AX
			MOV AL, DL	
			DIV Ten		
			MOV RTN_TOT(1), AL
			MOV RTN_TOT(2), AH
			ADD RTN_TOT(0), 30H
			ADD RTN_TOT(1), 30H
			ADD RTN_TOT(2), 30H
			PRINT RTN_M2
			MOV AH, 02H
			MOV DL, RTN_TOT(0)
			INT 21H
			MOV AH, 02H
			MOV DL, RTN_TOT(1)
			INT 21H
			MOV AH, 02H
			MOV DL, RTN_TOT(2)
			INT 21H

			RET
		RTN_HATS:
			CMP DL, 3
			JNE RTN_SOCKS

			PRINT RTN_M1
			MOV AH, 01H		; DIGIT 1
			INT 21H			
			MOV RTN_QTY(0), AL
			SUB RTN_QTY(0), 30H
			MOV AH, 01H		; DIGIT 2
			INT 21H				
			MOV RTN_QTY(1), AL
			SUB RTN_QTY(1), 30H
			XOR AX, AX				; COMBINE DIGIT1 & DIGIT 2
			MOV AL, RTN_QTY(0)
			MUL TEN
			ADD AL, RTN_QTY(1)
			XOR DX, DX
			XOR BX, BX

			MUL HATS				; PRICE OF PRODUCT
			DIV HUN
			MOV RTN_TOT(0), AL
			MOV DL, AH
			XOR AX,AX
			MOV AL, DL	
			DIV Ten		
			MOV RTN_TOT(1), AL
			MOV RTN_TOT(2), AH
			ADD RTN_TOT(0), 30H
			ADD RTN_TOT(1), 30H
			ADD RTN_TOT(2), 30H
			PRINT RTN_M2
			MOV AH, 02H
			MOV DL, RTN_TOT(0)
			INT 21H
			MOV AH, 02H
			MOV DL, RTN_TOT(1)
			INT 21H
			MOV AH, 02H
			MOV DL, RTN_TOT(2)
			INT 21H

			RET
		RTN_SOCKS:
			CMP DL, 4
			JNE RTN_EXIT

			PRINT RTN_M1
			MOV AH, 01H		; DIGIT 1
			INT 21H			
			MOV RTN_QTY(0), AL
			SUB RTN_QTY(0), 30H
			MOV AH, 01H		; DIGIT 2
			INT 21H				
			MOV RTN_QTY(1), AL
			SUB RTN_QTY(1), 30H
			XOR AX, AX				; COMBINE DIGIT1 & DIGIT 2
			MOV AL, RTN_QTY(0)
			MUL TEN
			ADD AL, RTN_QTY(1)
			XOR DX, DX
			XOR BX, BX

			MUL SOCKS				; PRICE OF PRODUCT
			DIV HUN
			MOV RTN_TOT(0), AL
			MOV DL, AH
			XOR AX,AX
			MOV AL, DL	
			DIV Ten		
			MOV RTN_TOT(1), AL
			MOV RTN_TOT(2), AH
			ADD RTN_TOT(0), 30H
			ADD RTN_TOT(1), 30H
			ADD RTN_TOT(2), 30H
			PRINT RTN_M2
			MOV AH, 02H
			MOV DL, RTN_TOT(0)
			INT 21H
			MOV AH, 02H
			MOV DL, RTN_TOT(1)
			INT 21H
			MOV AH, 02H
			MOV DL, RTN_TOT(2)
			INT 21H

			RET
		RTN_EXIT:
			CMP DL, 9			; EXIT
			JNE RTN_INVALID
			PRINT MSG3
			JMP TOP

		RTN_INVALID:
			PRINT MSG2
			JMP RETURN

			RET
RTN_CAL ENDP

;------RETURN RECEIPT
RTN_RCPT PROC NEAR
	PRINT RTN_M4

	mov ah, 0ah
	MOV DX, OFFSET RECEIPT_ID
	int 21h

	MOV SI, OFFSET RECEIPT_ID + 2
	MOV DI, OFFSET RECEIPT_NO      ;<=== POINT TO THE USER.
	
	RECEIPT_CMP: 
		;CHECK END OF USER.  
		  MOV DH, [DI]
		  CMP DH, '$'
		  JE  RECEIPT_CMP_SUC

		;CHECK END OF INPUT.  
		  MOV DL, [SI]          ;<=== CURRENT ENTERED CHAR.
		  CMP DL, 13
		  JE  RECEIPT_CMP_FAIL             ;<=== END REACHED. INPUT IS SHORTER.

		;COMPARE CURRENT ENTERED CHAR TO CURRENT USER CHAR.  
		  CMP DL, DH
		  JNE RECEIPT_CMP_FAIL             ;<=== CURRENT CHARS ARE DIFFERENT.
		  INC SI                ;<== NEXT ENTERED CHAR.
		  INC DI                ;<== NEXT USER CHAR.
		  JMP RECEIPT_CMP                ;<== REPEAT.
	
	RECEIPT_CMP_SUC:
		PRINT RTN_M2
		MOV AH, 02H
		MOV DL, CHECKOUT_PRICEATAX(0)
		INT 21H
		MOV AH, 02H
		MOV DL, CHECKOUT_PRICEATAX(1)
		INT 21H
		MOV AH, 02H
		MOV DL, CHECKOUT_PRICEATAX(2)
		INT 21H
		MOV AH, 02H
		MOV DL, 2EH
		INT 21H
		MOV AH, 02H
		MOV DL, CHECKOUT_PRICEATAX(3)
		INT 21H
		MOV AH, 02H
		MOV DL, 00H
		INT 21H

	RECEIPT_CMP_FAIL:
		PRINT RTN_M5
		JMP TOP

RTN_RCPT ENDP


PRINT_RECEIPT PROC NEAR

	;---------display
			XOR AX,AX
			XOR DX,DX
			
			ADD CHECKOUT_PRICEBTAX(0), 30H
			ADD CHECKOUT_PRICEBTAX(1), 30H
			ADD CHECKOUT_PRICEBTAX(2), 30H
			PRINT checkOut_M4 
			PRINT checkOut_M5
			MOV AH, 02H
			MOV DL, CHECKOUT_PRICEBTAX(0)
			INT 21H
			MOV AH, 02H
			MOV DL, CHECKOUT_PRICEBTAX(1)
			INT 21H
			MOV AH, 02H
			MOV DL, CHECKOUT_PRICEBTAX(2)
			INT 21H
			PRINT checkOut_M6
			PRINT checkOut_M7
			XOR AX,AX
			XOR DX,DX
			ADD CHECKOUT_TOT(0), 30H
			ADD CHECKOUT_TOT(1), 30H
			ADD CHECKOUT_TOT(2), 30H
			ADD CHECKOUT_TOTD(0), 30H
			ADD CHECKOUT_TOTD(1), 30H
			MOV AH, 02H
			MOV DL, CHECKOUT_TOT(0)
			INT 21H
			MOV AH, 02H
			MOV DL, CHECKOUT_TOT(1)
			INT 21H
			MOV AH, 02H
			MOV DL, CHECKOUT_TOT(2)
			INT 21H
			MOV AH, 02H
			MOV DL, 2EH
			INT 21H
			MOV AH, 02H
			MOV DL, CHECKOUT_TOTD(0)
			INT 21H

			MOV AH, 02H
			MOV DL, CHECKOUT_TOTD(1)
			INT 21H
	RET
PRINT_RECEIPT ENDP

CAL_TAX PROC NEAR

			XOR AX, AX				; COMBINE DIGITS
			MOV AL, CHECKOUT_PRICEBTAX_SHIRT(0)
			MUL TEN
			ADD AL, CHECKOUT_PRICEBTAX_SHIRT(1)
			MUL TEN
			ADD AL, CHECKOUT_PRICEBTAX_SHIRT(2)

			XOR BX, BX				; COMBINE DIGITS
			MOV BL, CHECKOUT_PRICEBTAX_SHORTS(0)
			MUL TEN
			ADD BL, CHECKOUT_PRICEBTAX_SHORTS(1)
			MUL TEN
			ADD BL, CHECKOUT_PRICEBTAX_SHORTS(2)

			XOR CX, CX				; COMBINE DIGITS
			MOV CL, CHECKOUT_PRICEBTAX_HATS(0)
			MUL TEN
			ADD CL, CHECKOUT_PRICEBTAX_HATS(1)
			MUL TEN
			ADD CL, CHECKOUT_PRICEBTAX_HATS(2)

			XOR DX, DX				; COMBINE DIGITS
			MOV DL, CHECKOUT_PRICEBTAX_SOCKS(0)
			MUL TEN
			ADD DL, CHECKOUT_PRICEBTAX_SOCKS(1)
			MUL TEN
			ADD DL, CHECKOUT_PRICEBTAX_SOCKS(2)

			ADD CHECKOUT_PRICEBTAX, AL
			ADD CHECKOUT_PRICEBTAX, BL
			ADD CHECKOUT_PRICEBTAX, CL
			ADD CHECKOUT_PRICEBTAX, DL
			XOR AX, AX
			MOV AL, CHECKOUT_PRICEBTAX

			MUL TAX				; 106
			DIV	HUN				; /100
			MOV CHECKOUT_PRICEATAX,AL 
			MOV CHECKOUT_PRICEATAXD,AH

			MOV AL,CHECKOUT_PRICEATAX
			DIV HUN 
			MOV CHECKOUT_TOT(0),AL 
			MOV DL, AH
			XOR AX,AX
			MOV AL,DL
			MOV CHECKOUT_TOT(1),AL
			MOV CHECKOUT_TOT(2),AH
			MOV AL,CHECKOUT_PRICEATAXD
			DIV TEN
			MOV CHECKOUT_TOTD(0),AL
			MOV CHECKOUT_TOTD(1),AH
			RET
CAL_TAX ENDP

CAL_TAX_DIS PROC NEAR
			XOR AX, AX				; COMBINE DIGITS
			MOV AL, CHECKOUT_PRICEBTAX_SHIRT(0)
			MUL TEN
			ADD AL, CHECKOUT_PRICEBTAX_SHIRT(1)
			MUL TEN
			ADD AL, CHECKOUT_PRICEBTAX_SHIRT(2)

			XOR BX, BX				; COMBINE DIGITS
			MOV BL, CHECKOUT_PRICEBTAX_SHORTS(0)
			MUL TEN
			ADD BL, CHECKOUT_PRICEBTAX_SHORTS(1)
			MUL TEN
			ADD BL, CHECKOUT_PRICEBTAX_SHORTS(2)

			XOR CX, CX				; COMBINE DIGITS
			MOV CL, CHECKOUT_PRICEBTAX_HATS(0)
			MUL TEN
			ADD CL, CHECKOUT_PRICEBTAX_HATS(1)
			MUL TEN
			ADD CL, CHECKOUT_PRICEBTAX_HATS(2)

			XOR DX, DX				; COMBINE DIGITS
			MOV DL, CHECKOUT_PRICEBTAX_SOCKS(0)
			MUL TEN
			ADD DL, CHECKOUT_PRICEBTAX_SOCKS(1)
			MUL TEN
			ADD DL, CHECKOUT_PRICEBTAX_SOCKS(2)

			ADD CHECKOUT_PRICEBTAX, AL
			ADD CHECKOUT_PRICEBTAX, BL
			ADD CHECKOUT_PRICEBTAX, CL
			ADD CHECKOUT_PRICEBTAX, DL
			XOR AX, AX
			MOV AL, CHECKOUT_PRICEBTAX
			MUL DISCOUNT		; *95
			DIV	HUN				; /100
			MUL TAX				; 106
			DIV	HUN				; /100
			MOV CHECKOUT_PRICEATAX,AL 
			MOV CHECKOUT_PRICEATAXD,AH

			MOV AL,CHECKOUT_PRICEATAX
			DIV HUN 
			MOV CHECKOUT_TOT(0),AL 
			MOV DL, AH
			XOR AX,AX
			MOV AL,DL
			MOV CHECKOUT_TOT(1),AL
			MOV CHECKOUT_TOT(2),AH
			XOR AX, AX
			MOV AL,CHECKOUT_PRICEATAXD
			DIV TEN
			MOV CHECKOUT_TOTD(0),AL
			MOV CHECKOUT_TOTD(1),AH
			RET
CAL_TAX_DIS ENDP

CHECK_MEMBERSHIP PROC NEAR
CHECK_MEMBER:
				PRINT checkOut_M3 
				XOR AX, AX
				XOR DX, DX
				MOV AH, 01H
				INT 21H
				MOV DL, AL
				SUB DL, 30H
				YES_MEMBER:
					CMP DL, 1
					JNE NO_MEMBER
					CALL CAL_TAX_DIS
					CALL PRINT_RECEIPT
					RET

				NO_MEMBER:
					CMP DL, 2
					JNE INVALID_MEMBER
					CALL CAL_TAX
			 		CALL PRINT_RECEIPT
					RET	
				INVALID_MEMBER:
					PRINT MSG2
					JMP CHECK_MEMBER

CHECK_MEMBERSHIP ENDP
;CHECKOUT 
CHECKOUT_CAL PROC NEAR
	CHECKOUT_START:
        PRINT  checkOut_M1
		MOV AH, 01H
		INT 21H
		MOV DL, AL
		SUB DL, 30H
 
		CHECKOUT_SHIRT:
			CMP DL, 1
			JNE CHECKOUT_SHORTS

			PRINT checkOut_M2
			MOV AH, 01H		; DIGIT 1
			INT 21H			
			MOV CHECKOUT_QTY(0), AL
			SUB CHECKOUT_QTY(0), 30H
			MOV AH, 01H		; DIGIT 2
			INT 21H				
			MOV CHECKOUT_QTY(1), AL
			SUB CHECKOUT_QTY(1), 30H
			XOR AX, AX				; COMBINE DIGIT1 & DIGIT 2
			MOV AL, CHECKOUT_QTY(0)
			MUL TEN
			ADD AL, CHECKOUT_QTY(1)

			XOR DX, DX
			XOR BX, BX

			MUL SHIRT				; PRICE OF PRODUCT
			DIV HUN
			MOV CHECKOUT_PRICEBTAX_SHIRT(0), AL
			MOV DL, AH
			XOR AX,AX
			MOV AL, DL	
			DIV Ten		
			MOV CHECKOUT_PRICEBTAX_SHIRT(1), AL
			MOV CHECKOUT_PRICEBTAX_SHIRT(2), AH

			CK_CHECK_MULTIPLE:
				PRINT MSG4
				XOR BX, BX
				MOV AH, 01H
				INT 21H
				MOV BL, AL
				SUB BL, 30H
				CK_CHECK_MULTIPLE_YES:
					CMP BL, 1
					JNE CK_CHECK_MULTIPLE_NO

					JMP CHECKOUT_START
				CK_CHECK_MULTIPLE_NO:
					CMP BL, 2
					JNE CK_CHECK_MULTIPLE_INVALID

					CALL CHECK_MEMBERSHIP
					RET
				CK_CHECK_MULTIPLE_INVALID:
					PRINT MSG2
					JMP CK_CHECK_MULTIPLE
		
		CHECKOUT_SHORTS:
			CMP DL, 2
			JNE CHECKOUT_HATS

			PRINT checkOut_M2
			MOV AH, 01H		; DIGIT 1
			INT 21H			
			MOV CHECKOUT_QTY(0), AL
			SUB CHECKOUT_QTY(0), 30H
			MOV AH, 01H		; DIGIT 2
			INT 21H				
			MOV CHECKOUT_QTY(1), AL
			SUB CHECKOUT_QTY(1), 30H
			XOR AX, AX				; COMBINE DIGIT1 & DIGIT 2
			MOV AL, CHECKOUT_QTY(0)
			MUL TEN
			ADD AL, CHECKOUT_QTY(1)

			XOR DX, DX
			XOR BX, BX

			MUL SHORTS				; PRICE OF PRODUCT
			DIV HUN
			MOV CHECKOUT_PRICEBTAX_SHORTS(0), AL
			MOV DL, AH
			XOR AX,AX
			MOV AL, DL	
			DIV Ten		
			MOV CHECKOUT_PRICEBTAX_SHORTS(1), AL
			MOV CHECKOUT_PRICEBTAX_SHORTS(2), AH

			CK_CHECK_MULTIPLE1:
				PRINT MSG4
				XOR BX, BX
				MOV AH, 01H
				INT 21H
				MOV BL, AL
				CK_CHECK_MULTIPLE_YES1:
					CMP BL, 1
					JNE CK_CHECK_MULTIPLE_NO1

					JMP CHECKOUT_START
				CK_CHECK_MULTIPLE_NO1:
					CMP BL, 2
					JNE CK_CHECK_MULTIPLE_INVALID1

					CALL CHECK_MEMBERSHIP
					RET
				CK_CHECK_MULTIPLE_INVALID1:
					PRINT MSG2
					JMP CK_CHECK_MULTIPLE
			RET
		CHECKOUT_HATS:
			CMP DL, 3
			JNE CHECKOUT_SOCKS

			PRINT checkOut_M2
			MOV AH, 01H		; DIGIT 1
			INT 21H			
			MOV CHECKOUT_QTY(0), AL
			SUB CHECKOUT_QTY(0), 30H
			MOV AH, 01H		; DIGIT 2
			INT 21H				
			MOV CHECKOUT_QTY(1), AL
			SUB CHECKOUT_QTY(1), 30H
			XOR AX, AX				; COMBINE DIGIT1 & DIGIT 2
			MOV AL, CHECKOUT_QTY(0)
			MUL TEN
			ADD AL, CHECKOUT_QTY(1)

			XOR DX, DX
			XOR BX, BX

			MUL HATS				; PRICE OF PRODUCT
			DIV HUN
			MOV CHECKOUT_PRICEBTAX_HATS(0), AL
			MOV DL, AH
			XOR AX,AX
			MOV AL, DL	
			DIV Ten		
			MOV CHECKOUT_PRICEBTAX_HATS(1), AL
			MOV CHECKOUT_PRICEBTAX_HATS(2), AH

			
			CK_CHECK_MULTIPLE2:
				PRINT MSG4
				XOR BX, BX
				MOV AH, 01H
				INT 21H
				MOV BL, AL
				CK_CHECK_MULTIPLE_YES2:
					CMP BL, 1
					JNE CK_CHECK_MULTIPLE_NO2

					JMP CHECKOUT_START
				CK_CHECK_MULTIPLE_NO2:
					CMP BL, 2
					JNE CK_CHECK_MULTIPLE_INVALID2

					CALL CHECK_MEMBERSHIP
					RET
				CK_CHECK_MULTIPLE_INVALID2:
					PRINT MSG2
					JMP CK_CHECK_MULTIPLE
			RET
		CHECKOUT_SOCKS:
			CMP DL, 4
			JNE CHECKOUT_EXIT

			PRINT checkOut_M2
			MOV AH, 01H		; DIGIT 1
			INT 21H			
			MOV CHECKOUT_QTY(0), AL
			SUB CHECKOUT_QTY(0), 30H
			MOV AH, 01H		; DIGIT 2
			INT 21H				
			MOV CHECKOUT_QTY(1), AL
			SUB CHECKOUT_QTY(1), 30H
			XOR AX, AX				; COMBINE DIGIT1 & DIGIT 2
			MOV AL, CHECKOUT_QTY(0)
			MUL TEN
			ADD AL, CHECKOUT_QTY(1)

			XOR DX, DX
			XOR BX, BX

			MUL SOCKS				; PRICE OF PRODUCT
			DIV HUN
			MOV CHECKOUT_PRICEBTAX_SOCKS(0), AL
			MOV DL, AH
			XOR AX,AX
			MOV AL, DL	
			DIV Ten		
			MOV CHECKOUT_PRICEBTAX_SOCKS(1), AL
			MOV CHECKOUT_PRICEBTAX_SOCKS(2), AH

			
			CK_CHECK_MULTIPLE3:
				PRINT MSG4
				XOR BX, BX
				MOV AH, 01H
				INT 21H
				MOV BL, AL
				CK_CHECK_MULTIPLE_YES3:
					CMP BL, 1
					JNE CK_CHECK_MULTIPLE_NO3

					JMP CHECKOUT_START
				CK_CHECK_MULTIPLE_NO3:
					CMP BL, 2
					JNE CK_CHECK_MULTIPLE_INVALID3

					CALL CHECK_MEMBERSHIP
					RET
				CK_CHECK_MULTIPLE_INVALID3:
					PRINT MSG2
					JMP CK_CHECK_MULTIPLE
			RET
		CHECKOUT_EXIT:
			CMP DL, 9			; EXIT
			JNE CHECKOUT_INVALID
			PRINT MSG3
			JMP TOP

		CHECKOUT_INVALID:
			PRINT MSG2
			JMP RETURN

			RET
CHECKOUT_CAL ENDP


;--------------EXIT PROGRAM
QUIT:				; EXIT PROGRAM
	MOV AH, 4CH
	INT 21H

	MAIN ENDP
END MAIN